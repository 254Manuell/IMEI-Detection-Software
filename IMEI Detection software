import platform
import psutil
import socket
import uuid
import json
from datetime import datetime

def get_system_info():
    """
    Collect system and device information for the local machine
    """
    system_info = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "system": {
            "os": platform.system(),
            "os_version": platform.version(),
            "architecture": platform.machine(),
            "processor": platform.processor(),
            "hostname": socket.gethostname(),
        },
        "hardware": {
            "cpu_count": psutil.cpu_count(),
            "memory_total": psutil.virtual_memory().total,
            "memory_available": psutil.virtual_memory().available,
            "disk_partitions": [partition.device for partition in psutil.disk_partitions()],
        },
        "network": {
            "hostname": socket.gethostname(),
            "mac_address": ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) 
                                   for elements in range(0,8*6,8)][::-1]),
        }
    }
    return system_info

def get_info_by_ip(ip_address):
    """
    Retrieve system information for a given IP address.
    Only resolves basic details like hostname. For more, you need remote access.
    """
    try:
        hostname, alias, address_list = socket.gethostbyaddr(ip_address)
        network_info = {
            "ip_address": ip_address,
            "hostname": hostname,
            "alias": alias,
            "address_list": address_list,
        }
        print(f"Network Information for {ip_address}:")
        for key, value in network_info.items():
            print(f"  {key.replace('_', ' ').title()}: {value}")
    except Exception as e:
        print(f"Error retrieving information for {ip_address}: {e}")

def save_system_info(filename="system_info.json"):
    """
    Save collected system information to a JSON file
    """
    info = get_system_info()
    with open(filename, 'w') as f:
        json.dump(info, f, indent=4)
    print(f"System information saved to {filename}")
    return info

def display_system_info(info):
    """
    Display system information in a formatted manner
    """
    print("\n=== System Information ===")
    print(f"Timestamp: {info['timestamp']}")
    
    print("\nSystem:")
    for key, value in info['system'].items():
        print(f"  {key.replace('_', ' ').title()}: {value}")
    
    print("\nHardware:")
    for key, value in info['hardware'].items():
        if key == "memory_total" or key == "memory_available":
            value = f"{value / (1024**3):.2f} GB"
        print(f"  {key.replace('_', ' ').title()}: {value}")
    
    print("\nNetwork:")
    for key, value in info['network'].items():
        print(f"  {key.replace('_', ' ').title()}: {value}")

# Example usage
if __name__ == "__main__":
    target_ip = input("Enter the IP address: ")
    get_info_by_ip(target_ip)  # Retrieve network info for the IP address
    
    # Collect and save local system information (for comparison)
    local_info = save_system_info()
    display_system_info(local_info)
